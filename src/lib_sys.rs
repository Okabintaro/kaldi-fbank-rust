/* automatically generated by rust-bindgen 0.69.4 */

pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FrameExtractionOptions {
    pub samp_freq: f32,
    pub frame_shift_ms: f32,
    pub frame_length_ms: f32,
    pub dither: f32,
    pub preemph_coeff: f32,
    pub remove_dc_offset: bool,
    pub window_type: *const ::std::os::raw::c_char,
    pub round_to_power_of_two: bool,
    pub blackman_coeff: f32,
    pub snip_edges: bool,
}
#[test]
fn bindgen_test_layout_FrameExtractionOptions() {
    const UNINIT: ::std::mem::MaybeUninit<FrameExtractionOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FrameExtractionOptions>(),
        48usize,
        concat!("Size of: ", stringify!(FrameExtractionOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<FrameExtractionOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(FrameExtractionOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samp_freq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(samp_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_shift_ms) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(frame_shift_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_length_ms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(frame_length_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dither) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(dither)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preemph_coeff) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(preemph_coeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remove_dc_offset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(remove_dc_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).window_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(window_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).round_to_power_of_two) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(round_to_power_of_two)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blackman_coeff) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(blackman_coeff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).snip_edges) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(FrameExtractionOptions),
            "::",
            stringify!(snip_edges)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MelBanksOptions {
    pub num_bins: i32,
    pub low_freq: f32,
    pub high_freq: f32,
    pub vtln_low: f32,
    pub vtln_high: f32,
    pub debug_mel: bool,
    pub htk_mode: bool,
    pub is_librosa: bool,
    pub norm: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_MelBanksOptions() {
    const UNINIT: ::std::mem::MaybeUninit<MelBanksOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MelBanksOptions>(),
        32usize,
        concat!("Size of: ", stringify!(MelBanksOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<MelBanksOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(MelBanksOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_bins) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(num_bins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).low_freq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(low_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).high_freq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(high_freq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtln_low) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(vtln_low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtln_high) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(vtln_high)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).debug_mel) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(debug_mel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).htk_mode) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(htk_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_librosa) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(is_librosa)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).norm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MelBanksOptions),
            "::",
            stringify!(norm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FbankOptions {
    pub frame_opts: FrameExtractionOptions,
    pub mel_opts: MelBanksOptions,
    pub use_energy: bool,
    pub energy_floor: f32,
    pub raw_energy: bool,
    pub htk_compat: bool,
    pub use_log_fbank: bool,
    pub use_power: bool,
}
#[test]
fn bindgen_test_layout_FbankOptions() {
    const UNINIT: ::std::mem::MaybeUninit<FbankOptions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FbankOptions>(),
        96usize,
        concat!("Size of: ", stringify!(FbankOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<FbankOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(FbankOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).frame_opts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FbankOptions),
            "::",
            stringify!(frame_opts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mel_opts) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FbankOptions),
            "::",
            stringify!(mel_opts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_energy) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(FbankOptions),
            "::",
            stringify!(use_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).energy_floor) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FbankOptions),
            "::",
            stringify!(energy_floor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_energy) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FbankOptions),
            "::",
            stringify!(raw_energy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).htk_compat) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(FbankOptions),
            "::",
            stringify!(htk_compat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_log_fbank) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(FbankOptions),
            "::",
            stringify!(use_log_fbank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_power) as usize - ptr as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(FbankOptions),
            "::",
            stringify!(use_power)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OnlineFbank {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Create a new OnlineFbank object with the given sample rate"]
    pub fn OnlineFbankNew(opts: FbankOptions) -> *mut OnlineFbank;
}
extern "C" {
    #[doc = " Free the memory allocated for the OnlineFbank object"]
    pub fn OnlineFbankFree(self_: *mut OnlineFbank);
}
extern "C" {
    #[doc = " Get the dimension of the feature vectors produced by the OnlineFbank object"]
    pub fn OnlineFbankDim(self_: *mut OnlineFbank) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Accept a waveform and add it to the buffer of the OnlineFbank object"]
    pub fn OnlineFbankAcceptWaveform(
        self_: *mut OnlineFbank,
        sampling_rate: f32,
        waveform: *const f32,
        n: i32,
    );
}
extern "C" {
    #[doc = " Indicate that the input has finished and no more waveforms will be added"]
    pub fn OnlineFbankInputFinished(self_: *mut OnlineFbank);
}
extern "C" {
    #[doc = " Get the feature vector for a specific frame"]
    pub fn OnlineFbankGetFrame(self_: *mut OnlineFbank, frame: i32) -> *const f32;
}
extern "C" {
    #[doc = " Return the number of ready frames"]
    pub fn OnlineFbankNumFramesReady(self_: *mut OnlineFbank) -> i32;
}
extern "C" {
    #[doc = " Check if a specific frame is the last one"]
    pub fn OnlineFbankIsLastFrame(self_: *mut OnlineFbank, frame: i32) -> bool;
}
extern "C" {
    #[doc = " Get the frame shift in seconds"]
    pub fn OnlineFbankFrameShiftInSeconds(self_: *mut OnlineFbank) -> f32;
}
extern "C" {
    #[doc = " Discard the first n frames"]
    pub fn OnlineFbankPop(self_: *mut OnlineFbank, n: i32);
}
